{
  "hash": "0bbc5c384e212e7019e7de02943a0aba",
  "result": {
    "markdown": "---\ntitle: \"Tworzenie ankiet Google z poziomu kodu\"\ndescription: \"Zamiast wyklikiwania ankiet w Google Forms można wykorzystać JavaScript i zautomatyzować swoją pracę.\"\nauthor: \"Łukasz Wawrowski\"\ndate: \"12-28-2017\"\n---\n\n\n\n\nGoogle udostępnia bardzo przyjazne i darmowe narzędzie do tworzenia ankiet: [Google Forms](https://docs.google.com/forms/). Dostępnych jest bardzo wiele typów pytań, które tworzone są w wygodnym edytorze. Istnieje jednak także inny sposób tworzenia ankiet - z wykorzystaniem kodu javascript. \n\nAby rozpocząć przygodę z kodowaniem ankiet (lub innych produktów Google) należy zapoznać się z [dokumentacją](https://developers.google.com/apps-script/reference/forms/). Z kolei napisane programy wykonujemy w [edytorze skryptów](https://script.google.com/).\n\n# Prosta ankieta\n\nNa początku utworzymy prostą ankietę składającą się z dwóch pytań - o płeć i ulubiony słodycz.\n\n```javascript\n\nfunction stworzAnkiete() {\n  \n  var form = FormApp.create('Ankieta');\n  \n  form.addMultipleChoiceItem()\n  .setTitle('Płeć')\n  .setChoiceValues(['Kobieta', 'Mężczyzna'])\n  .setRequired(true);\n  \n  form.addCheckboxItem()\n  .setTitle('Ulubiony słodycz')\n  .setChoiceValues(['Czekolada', 'Żelki', 'Batony', 'Owoce'])\n  .showOtherOption(true);\n  \n}\n\n```\n\nW pierwszym kroku tworzymy zmienną (w tym przypadku o nazwie `form`), która jest odpowiedzialna na utworzenie ankiety, a do której będziemy dodawać kolejne elementy. Jako argument funkcji podajemy nazwę ankiety.\n\nNastępnie na obiekcie `form` wywołujemy funkcje dodające kolejne pytania. Funkcja `addMultipleChoiceItem()` to pytanie jednokrotnego wyboru. Ustalamy nazwę pytania oraz warianty odpowiedzi. Za pomocą funkcji `setRequired()` decydujemy czy odpowiedź na to pytanie ma być obowiązkowa.\n\nZ kolei funkcja `addCheckboxItem()` dodaje pytanie wielokrotnego wyboru. Tytuł i warianty odpowiedzi definiuje się tak samo, jak w poprzednim przypadku, ale dodatkowo mamy możliwość włączenia odpowiedzi _inne_ za pomocą funkcji `showOtherOption(true)`.\n\nW przypadku niektórych pytań niezbędna jest walidacja wprowadzonej przez respondenta wartości. Dodajmy do naszej ankiety pytanie o wzrost.\n\n```javascript\nfunction stworzAnkiete() {\n  \n  var form = FormApp.create('Ankieta');\n  \n  form.addMultipleChoiceItem()\n  .setTitle('Płeć')\n  .setChoiceValues(['Kobieta', 'Mężczyzna'])\n  .setRequired(true);\n  \n  form.addCheckboxItem()\n  .setTitle('Ulubiony słodycz')\n  .setChoiceValues(['Czekolada', 'Żelki', 'Batony', 'Owoce'])\n  .showOtherOption(true);\n  \n  var wzrost = form.addTextItem().setTitle('Wzrost (w cm)');\n  \n  var wzrostWalidacja = FormApp.createTextValidation()\n  .setHelpText('Wzrost musi być liczbą z przedziału 120 cm a 220 cm')\n  .requireNumberBetween(120,220)\n  .build();\n  \n  wzrost.setValidation(wzrostWalidacja);\n  \n}\n```\n\nWalidacja pytania o wzrost wiąże się z koniecznością przypisania samego pytania do zmiennej. Tworzona jest zmienna `wzrost`, która jest pytaniem typu tekstowego (`addTextItem()`), w związku z czym ankietowany mógłby wpisać tam dowolną wartość. \n\nOgraniczenie tego typu praktyk jest możliwe dzięki utworzeniu nowego obiektu (np. o nazwie `wzrostWalidacja`) zawierającego kryteria walidacji. Możemy określić tekstową podpowiedź dotyczącą wartości (`setHelpText`), a także zdefiniować jakie wartości są dopuszczalne. W tym przypadku wzrost musi pochodzić z przedziału od 120 do 220 cm za co odpowiada funkcja `requireNumberBetween(120,220)`. Definiowanie kryteriów walidacji musi być zakończone funkcją `build()`.\n\nUtworzone zmienne `wzrost` i `wzrostWalidacja` nie są póki co ze sobą w żaden sposób powiązane. Aby zdefiniowana przez nas walidacja została zastosowana to na obiekcie `wzrost` musimy wywołać funkcję `setValidation(wzrostWalidacja)` z argumentem zawierającym kryteria walidacji. Dzięki tak określonej składni możliwe jest przypisanie jednego sposobu walidacji do wielu pytań w ankiecie.\n\n# Pytania filtrujące\n\nGoogle Forms umożliwia także tworzenie ścieżek w ankiecie w zależności od zaznaczonej przez respondenta odpowiedzi. Zmodyfikujemy zatem wcześniej omówioną ankietę w taki sposób, aby płeć stanowiła pytanie filtrujące. Jeśli ankietowany wskaże, że jest mężczyzną to będzie musiał odpowiedzieć na pytanie o ulubiony słodycz, natomiast kobiety zobaczą pytanie o wzrost.\n\n```javascript\nfunction stworzAnkiete2() {\n\n  var form = FormApp.create('Ankieta 2');\n    \n  var plec = form.addMultipleChoiceItem();\n  \n  var m = form.addPageBreakItem().setTitle('Mężczyzna');\n  \n  form.addCheckboxItem()\n  .setTitle('Ulubiony słodycz')\n  .setChoiceValues(['Czekolada', 'Żelki', 'Batony', 'Owoce'])\n  .showOtherOption(true);\n  \n  var k = form.addPageBreakItem().setTitle('Kobieta');\n  \n  var wzrost = form.addTextItem().setTitle('Wzrost (w cm)');\n  \n  var wzrostWalidacja = FormApp.createTextValidation()\n  .setHelpText('Wzrost musi być liczbą z przedziału 120 cm a 220 cm')\n  .requireNumberBetween(120,220)\n  .build();\n  \n  wzrost.setValidation(wzrostWalidacja);\n  \n  plec.setTitle('Płeć')\n  .setChoices([\n    plec.createChoice('Kobieta', k), \n    plec.createChoice('Mężczyzna', m)])\n  .setRequired(true)\n   \n}\n\n```\n\nTo co od razu rzuca się w oczy to dużo większa liczba zmiennych. Przede wszystkim pytanie filtrujące musi być zmienną, stąd jest przypisane do zmiennej o nazwie `plec`. Dodatkowo dodaliśmy zmienne (`m` i `k`), które przechowują podział sekcji (`addPageBreakItem()`) i mają odpowiednio nadane nazwy nowych stron. Pytania, które mają być zadane respondentowi po przejściu pytania filtrującego muszą się znaleźć poniżej podziału sekcji. \n\nSposób zachowywania się ankiety określamy na samym końcu kodu. Na obiekcie zawierającym pytanie filtrujące wywołujemy funkcję `setChoices` (wcześniej używaliśmy `setChoicesValues`). Jako argumenty tej funkcji definiujemy pary: odpowiedź w pytaniu filtrującym i zmienna podziału sekcji do której respondent ma być przekierowany. \n\n# Tworzenie podobnych pytań w funkcji\n\nCzasem w ankiecie pojawia się wiele podobnych pytań np. w ankiecie mającej na celu ocenę przedmiotów na studiach będą zmieniały się tylko nazwy przedmiotów bądź prowadzący. Można oczywiście skopiować dane pytanie _n_ razy, ale w przypadku, gdy będziemy chcieli coś zmienić będzie się to wiązało ze zmianą w _n_ przypadkach.\n\nUtworzenie własnej funkcji, która będzie tworzyć pytanie zaoszczędzi nam kłopotów w przypadku jakichkolwiek zmian oraz zmniejszy liczbę linii kodu. \n\n```javascript\n\nfunction main() {\n  \n  function zrozumialosc(przedmiot) {\n  \n    var p = przedmiot + ' - zrozumiałość treści'\n  \n    form.addMultipleChoiceItem()\n    .setTitle(p)\n    .setChoiceValues(['Bardzo zrozumiałe', \n                      'Zrozumiałe', \n                      'Nie zrozumiałe', \n                      'Bardzo nie zrozumiałe']);\n  \n  }\n  \n  var form = FormApp.create('Badanie jakości kształcenia');\n  \n  zrozumialosc('Przedmiot A');\n  zrozumialosc('Przedmiot B');\n  zrozumialosc('Przedmiot C');\n  \n}\n\n\n```\n\nW powyższym kodzie funkcja `zrozumialosc` zawiera pytanie jednokrotnego wyboru o zrozumiałość treści danego przedmiotu, który deklaruje się jako argument funkcji. Żeby utworzyć takie pytanie wywołujemy funkcję `zrozumialosc` podając w nawiasie nazwę przedmiotu. Dzięki takiemu rozwiązaniu dodanie kolejnego wariantu odpowiedzi wiąże się ze zmianą tylko w jednym miejscu - funkcji zawierającej deklarację pytania. \n\nFunkcje, w których deklarujemy pytania w ankiecie mogą być dużo bardziej rozbudowane i mogą zawierać więcej argumentów niż tylko jeden. Wszystko zależy od aktualnych potrzeb.\n\n# Podsumowanie\n\nTworzenie prostych ankiet z poziomu kodu raczej nie ma większego sensu, ale zastosowanie tego narzędzia w przypadku złożonych kwestionariuszy składających się z podobnych pytań może zdecydowanie ułatwić nam pracę. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}